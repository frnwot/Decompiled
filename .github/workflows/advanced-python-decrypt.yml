name: Advanced Python Decrypt & Upload Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'Direct download URL of the obfuscated/encrypted Python script'
        required: true
      release_tag:
        description: 'GitHub release tag (e.g., v1.0)'
        required: true

jobs:
  decrypt_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install black

      - name: Download the obfuscated script
        run: |
          curl -L "${{ github.event.inputs.file_url }}" -o input.py
          test -s input.py || (echo "Download failed or empty!" && exit 1)

      - name: Create decoder script
        run: |
          mkdir tools
          cat > tools/custom_cleaner.py << 'EOF'
import base64, marshal, zlib, re, builtins

def decode_recursive(data: str, max_depth=10):
    for _ in range(max_depth):
        try:
            # Remove wrapping exec or eval
            data = re.sub(r'^\s*(exec|eval)\((.+)\)\s*$', r'\2', data.strip())

            # Base64 decoding
            m = re.search(r'base64\.b64decode\((.+?)\)', data)
            if m:
                decoded_bytes = base64.b64decode(eval(m.group(1)))
                data = decoded_bytes.decode('utf-8', errors='ignore')
                continue

            # Marshal loads
            if "marshal.loads" in data:
                m = re.search(r'marshal\.loads\((.+?)\)', data)
                if m:
                    dumped = eval(m.group(1))
                    code_obj = marshal.loads(dumped)
                    data = builtins.compile(code_obj, "<decoded>", "exec")
                    return data

            # bytes.fromhex
            m = re.search(r'bytes\.fromhex\((.+?)\)', data)
            if m:
                data = bytes.fromhex(eval(m.group(1))).decode()
                continue

            # zlib decompress
            m = re.search(r'zlib\.decompress\((.+?)\)', data)
            if m:
                raw = eval(m.group(1))
                data = zlib.decompress(raw).decode()
                continue

            # Direct base64 string?
            if re.fullmatch(r'[A-Za-z0-9+/=]{40,}', data.replace('\n', '')):
                data = base64.b64decode(data).decode()
                continue

            break
        except Exception:
            break
    return data

def save_output(decoded):
    with open('output/decrypted.py', 'w', encoding='utf-8') as f:
        if isinstance(decoded, str):
            f.write(decoded)
        else:
            import dis
            f.write("# Decompiled code object:\n")
            dis.dis(decoded, file=f)

if __name__ == "__main__":
    import os
    os.makedirs('output', exist_ok=True)
    raw = open('input.py', 'r', encoding='utf-8', errors='ignore').read()
    cleaned = decode_recursive(raw)
    save_output(cleaned)
EOF

      - name: Run decoder script
        run: python3 tools/custom_cleaner.py

      - name: Format output code
        run: black output/decrypted.py || true

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          tag: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          body: 'Automatically decrypted Python script.'
          draft: false
          prerelease: false

      - name: Upload decrypted script as release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          files: output/decrypted.py
          overwrite: true
